{"version":3,"sources":[".././src/core/ALExtendedCop.ts",".././src/core/PowershellAdapter.ts","../external \"child_process\"","../external \"path\"","../external \"vscode\"","../webpack/bootstrap",".././src/extension.ts"],"names":[],"mappings":"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","file":"extension.js","sourcesContent":["import * as vscode from 'vscode';\r\nimport * as PowershellAdapter from './PowershellAdapter';\r\n\r\nexport class ALExtendedCop {\r\n    private ctx: vscode.ExtensionContext;\r\n    private diagnosticMap: Map<string, vscode.Diagnostic[]>;\r\n    private diagnosticCollection: vscode.DiagnosticCollection;\r\n    private checkCommand = \"al-extended-cop.checkCommand\";\r\n\r\n    private checkCommandHandler = () => {\r\n        const currentTextEditor = vscode.window.activeTextEditor;\r\n        this.check(currentTextEditor?.document);\r\n    }\r\n\r\n    constructor(ctx: vscode.ExtensionContext) {\r\n        this.ctx = ctx;\r\n        this.diagnosticCollection = vscode.languages.createDiagnosticCollection('al-extended-cops');\r\n        this.ctx.subscriptions.push(this.diagnosticCollection);\r\n        this.ctx.subscriptions.push(vscode.commands.registerCommand(this.checkCommand, this.checkCommandHandler));\r\n        this.diagnosticMap = new Map();\r\n\r\n        vscode.workspace.onDidOpenTextDocument(document => {\r\n            if (document.fileName.endsWith(\"al\")){\r\n                this.check(document);\r\n            }\r\n        });\r\n        vscode.workspace.onDidChangeTextDocument(evt => {\r\n            //this.check(evt.document), undefined, this.ctx.subscriptions\r\n            this.check(evt.document);\r\n        });\r\n        vscode.workspace.onDidCloseTextDocument((textDocument) => {\r\n            this.diagnosticCollection.delete(textDocument.uri);\r\n        }, null, this.ctx.subscriptions);\r\n        vscode.workspace.onDidSaveTextDocument(document => {\r\n            this.check(document)\r\n        });\r\n        vscode.window.onDidChangeActiveTextEditor(editor => {\r\n            if (editor) {\r\n                this.check(editor.document);\r\n            }\r\n        }, undefined, this.ctx.subscriptions);\r\n        vscode.workspace.textDocuments.forEach(document=> {             \r\n            this.check(document);\r\n        });\r\n    }\r\n\r\n    private getALCCompilerPath(): string {\r\n        let alcCompilerPath: string = \"\";\r\n        try {\r\n            let alExtension = vscode.extensions.getExtension('ms-dynamics-smb.al');\r\n            alcCompilerPath = alExtension?.extensionPath as string;\r\n        } catch { }\r\n        let workSpaceConfiguration = vscode.workspace.getConfiguration('kvs');\r\n        if (workSpaceConfiguration !== null && workSpaceConfiguration !== undefined && workSpaceConfiguration.alcPath !== null && workSpaceConfiguration.alcPath !== undefined && workSpaceConfiguration.alcPath !== \"\") {\r\n            alcCompilerPath = workSpaceConfiguration.alcPath;\r\n        }\r\n        return alcCompilerPath;\r\n    }\r\n\r\n    private getCheckGlobalProcedures(): boolean {\r\n        let checkGlobalProcedures: boolean = true;\r\n        let workSpaceConfiguration = vscode.workspace.getConfiguration('kvs');\r\n        if (workSpaceConfiguration !== null && workSpaceConfiguration !== undefined && workSpaceConfiguration.checkGlobalProcedures !== null && workSpaceConfiguration.checkGlobalProcedures !== undefined && workSpaceConfiguration.checkGlobalProcedures === false) {\r\n            checkGlobalProcedures = false;\r\n        }\r\n        return checkGlobalProcedures;\r\n    }\r\n\r\n    private getCheckApplicationAreaValidity(): boolean {\r\n        let checkApplicationAreaValidity: boolean = true;\r\n        let workSpaceConfiguration = vscode.workspace.getConfiguration('kvs');\r\n        if (workSpaceConfiguration !== null && workSpaceConfiguration !== undefined && workSpaceConfiguration.checkApplicationAreaValidity !== null && workSpaceConfiguration.checkApplicationAreaValidity !== undefined && workSpaceConfiguration.checkApplicationAreaValidity === false) {\r\n            checkApplicationAreaValidity = false;\r\n        }\r\n        return checkApplicationAreaValidity;\r\n    }\r\n\r\n    private getTranslation(): boolean {\r\n        let checkTranslation: boolean = true;\r\n        let workSpaceConfiguration = vscode.workspace.getConfiguration('kvs');\r\n        if (workSpaceConfiguration !== null && workSpaceConfiguration !== undefined && workSpaceConfiguration.checkTranslation !== null && workSpaceConfiguration.checkTranslation !== undefined && workSpaceConfiguration.checkTranslation === false) {\r\n            checkTranslation = false;\r\n        }\r\n        return checkTranslation;\r\n    }\r\n\r\n    private getValidApplicationAreas(): string {\r\n        let validApplicationAreas: string = \"\";\r\n        let workSpaceConfiguration = vscode.workspace.getConfiguration('kvs');\r\n        if (workSpaceConfiguration !== null && workSpaceConfiguration !== undefined && workSpaceConfiguration.validApplicationAreas !== null && workSpaceConfiguration.validApplicationAreas !== undefined && workSpaceConfiguration.validApplicationAreas !== \"\") {\r\n            validApplicationAreas = workSpaceConfiguration.validApplicationAreas;\r\n        }\r\n        return validApplicationAreas;\r\n    }\r\n\r\n    private getUri(fileName:string): vscode.Uri {\r\n        //let path = fileName.split('\\\\')?.pop()?.split('/').pop() as string;        \r\n        let uri =  vscode.Uri.parse(fileName, true);\r\n        return uri;\r\n    }\r\n\r\n    public check(textDocument: vscode.TextDocument | undefined) {\r\n        if (!textDocument) {\r\n            return;\r\n        }        \r\n        const alcCompilerPath: string = this.getALCCompilerPath();\r\n        const checkGlobalProcedures: boolean = this.getCheckGlobalProcedures();\r\n        // const validApplicationAreas: string = this.getValidApplicationAreas();\r\n        // const checkApplicationAreaValidity: boolean = this.getCheckApplicationAreaValidity();\r\n        const checkTranslation: boolean = this.getTranslation();\r\n        PowershellAdapter.getAlDiagnostics(\r\n            alcCompilerPath,\r\n            textDocument.fileName,\r\n            checkTranslation\r\n        )\r\n            .then((diagnostics: Array<vscode.Diagnostic>) => {\r\n                \r\n                //this.diagnosticCollection.delete(this.getUri(canonicalFile));\r\n                this.diagnosticCollection.set(textDocument.uri, diagnostics);\r\n                // this.diagnosticMap.set(canonicalFile, diagnostics);\r\n                // this.diagnosticMap.forEach((diags, file) => {                    \r\n                //     this.diagnosticCollection.set(this.getUri(file), diags);\r\n                // });\r\n            }).catch((reason)=> {\r\n                this.diagnosticCollection.clear();\r\n            });\r\n    }\r\n}\r\n","import * as childProcessModule from 'child_process';\r\nimport * as path from 'path';\r\nimport * as vscode from 'vscode';\r\nimport { resolve } from 'dns';\r\nimport { stdout } from 'process';\r\n\r\nfunction Invoke(psCmd: string, args: string, callback?: (error: childProcessModule.ExecException | null, stdout: string, stderr: string) => void): childProcessModule.ChildProcess {\r\n    const cmd = `PowerShell.exe -ExecutionPolicy Bypass -file \"${psCmd}\" ${args}`;\r\n    const options: any = {\r\n        shell: true,\r\n        windowsHide: true,\r\n    \r\n    }\r\n    return childProcessModule.exec(cmd, options, callback)\r\n}\r\n\r\nfunction getGetAlDiagnosticsPsScriptPath() {\r\n    var scriptPath = path.join(path.dirname(__filename), \"..\", \"dist\", \"powershell\", \"Get-ALDiagnostics.ps1\");\r\n    return scriptPath;\r\n}\r\n\r\nfunction GetResultObject(raw: string): any{\r\n    let line = \"\";\r\n    let jResultObject = \"\";\r\n    let isResultObject = false;\r\n    for(var i = 0; i < raw.length+1 ; i++) {\r\n        line += raw.charAt(i);\r\n        if (line.endsWith(\"\\r\\n\")){ \r\n            let currentline = line.substring(0, line.length-2);\r\n            line = \"\";            \r\n            if (currentline.startsWith(\">>>\")){\r\n                isResultObject = true;\r\n                currentline = \"{\";\r\n            }\r\n            if (currentline.startsWith(\"<<<\")){\r\n                isResultObject = false;\r\n                currentline = \"\";\r\n                break;\r\n            }\r\n            if (isResultObject){\r\n                jResultObject += currentline;\r\n            }            \r\n        }        \r\n    };\r\n    const jsonResult = JSON.parse(jResultObject);\r\n    return jsonResult;\r\n}\r\n\r\n\r\nexport async function getAlDiagnostics(alcCompilerPath: string | undefined, alFileToCheck: string, checkTranslation: boolean): Promise<Array<vscode.Diagnostic>> {\r\n    const powerShellScript = getGetAlDiagnosticsPsScriptPath();\r\n    let args = `-AlcFolderPath \"${alcCompilerPath}\" -ALFileToCheck \"${alFileToCheck}\"`;    \r\n    if (checkTranslation){\r\n        args += ` -CheckTranslation`;\r\n    }\r\n\r\n    var promise = new Promise<any>((resolve, reject) => {\r\n        Invoke(powerShellScript, args, (error, stdout, stderr) => {\r\n            if (error) {\r\n                console.error(`getAlDiagnostics exec error: ${error}`);\r\n                reject(error);\r\n                return;\r\n            }\r\n            if (stdout === \"\" && stderr !== \"\"){\r\n                console.error(`getAlDiagnostics outputed error: ${stderr}`);\r\n                reject(stderr);\r\n                return;\r\n            }\r\n\r\n            let diagnosticCollection = new Array<vscode.Diagnostic>();\r\n            const jsonResult = GetResultObject(stdout);\r\n            jsonResult.Diagnostics.forEach((jDiagnostic: any) => {\r\n                let startPos : vscode.Position = new vscode.Position(jDiagnostic.StartLinePositionLine, jDiagnostic.StartCharacter);\r\n                let endPos : vscode.Position = new vscode.Position(jDiagnostic.EndLinePositionLine, jDiagnostic.EndCharacter);\r\n                let diagnosticRange = new vscode.Range(startPos, endPos);\r\n                let diagnosticMessage = jDiagnostic.Description;\r\n                let diagnosticSeverity : vscode.DiagnosticSeverity = vscode.DiagnosticSeverity.Error;                \r\n                switch(jDiagnostic.DiagnosticSeverity){\r\n                    case \"Error\": {\r\n                        diagnosticSeverity = vscode.DiagnosticSeverity.Error;\r\n                        break;\r\n                    }\r\n                    case \"Hidden\": {\r\n                        diagnosticSeverity = vscode.DiagnosticSeverity.Hint;\r\n                        break;\r\n                    }\r\n                    case \"Info\": {\r\n                        diagnosticSeverity = vscode.DiagnosticSeverity.Information;\r\n                        break;\r\n                    }\r\n                    case \"Warning\": {\r\n                        diagnosticSeverity = vscode.DiagnosticSeverity.Warning;\r\n                        break;\r\n                    }\r\n                }\r\n                let diagnostic = new vscode.Diagnostic(diagnosticRange, diagnosticMessage, diagnosticSeverity);\r\n                diagnosticCollection = diagnosticCollection.concat(diagnostic);\r\n            });\r\n            \r\n            resolve(diagnosticCollection);\r\n        });\r\n    });\r\n    return promise;\r\n}","module.exports = require(\"child_process\");;","module.exports = require(\"path\");;","module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport {ALExtendedCop}\tfrom './core/ALExtendedCop';\n\nlet diagnosticCollection: vscode.DiagnosticCollection;\nlet alExendedCop : ALExtendedCop;\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\n\tlet alExendedCop = new ALExtendedCop(context);\n\t//let uri = vscode.Uri.file(\"D:\\\\Repos\\\\GitHub\\\\KonnosPB\\\\vsc-al-translation\\\\al-translation-support\\\\src\\\\extension.ts\");\n\t//alExendedCop.check(uri);\n\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\t// This line of code will only be executed once when your extension is activated\n\tconsole.log('Congratulations, your extension \"al-translation-support\" is now active!');\n\n\t// The command has been defined in the package.json file\n\t// Now provide the implementation of the command with registerCommand\n\t// The commandId parameter must match the command field in package.json\n\tlet disposable = vscode.commands.registerCommand('al-translation-support.helloWorld', () => {\n\t\t// The code you place here will be executed every time your command is executed\n\n\t\t// Display a message box to the user\n\t\tvscode.window.showInformationMessage('Hello World from AL Translation Support!');\n\t});\t\n\n\tcontext.subscriptions.push(disposable);\n}\n\nfunction onChange(){\n\tconst currentTextEditor = vscode.window.activeTextEditor;\n\talExendedCop.check(currentTextEditor?.document);\n}\n\n\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\n"],"sourceRoot":""}