{"version":3,"sources":[".././src/core/ALExtendedCop.ts",".././src/core/PowershellAdapter.ts","../external \"child_process\"","../external \"path\"","../external \"vscode\"","../webpack/bootstrap",".././src/extension.ts"],"names":[],"mappings":"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","file":"extension.js","sourcesContent":["import * as vscode from 'vscode';\r\nimport * as PowershellAdapter from './PowershellAdapter';\r\n\r\nexport class ALExtendedCop {  \r\n    private ctx: vscode.ExtensionContext;\r\n    private diagnosticMap: Map<string, vscode.Diagnostic[]>;\r\n    private diagnosticCollection: vscode.DiagnosticCollection;\r\n    private checkCommand = \"al-extended-cop.checkCommand\";\r\n    private checkCommandHandler = ()=> {\r\n       const currentTextEditor = vscode.window.activeTextEditor;\r\n       this.check(currentTextEditor?.document);\r\n    }\r\n\r\n    constructor(ctx: vscode.ExtensionContext){\r\n        this.ctx = ctx;\r\n        this.diagnosticCollection =  vscode.languages.createDiagnosticCollection('al');\r\n        this.ctx.subscriptions.push(this.diagnosticCollection);\r\n        this.ctx.subscriptions.push(vscode.commands.registerCommand(this.checkCommand, this.checkCommandHandler));\r\n        this.diagnosticMap = new Map();\r\n    }   \r\n\r\n   \r\n    public check(textDocument: vscode.TextDocument | undefined){\r\n        if (!textDocument){\r\n            return;\r\n        }\r\n        this.diagnosticCollection.clear();\r\n\r\n        this.checkFile(textDocument.fileName);\r\n\r\n        this.diagnosticMap.forEach((diags, file) => {\r\n            this.diagnosticCollection.set(vscode.Uri.parse(file), diags);\r\n        });\r\n    }\r\n\r\n    private checkFile(canonicalFile: string) {\r\n        PowershellAdapter.getAlDiagnostics(canonicalFile)\r\n            .then((jsonResult: any) => {\r\n                console.log(\"Test\");\r\n                //errors.forEach(error => {\r\n                //let canonicalFile = vscode.Uri.file(error.file).toString();\r\n                //let range = new vscode.Range(error.line-1, error.startColumn, error.line-1, error.endColumn);\r\n                let diagnostics = this.diagnosticMap.get(canonicalFile);\r\n                if (!diagnostics) { diagnostics = []; }\r\n                //diagnostics.push(new vscode.Diagnostic(range, error.msg, error.severity));\r\n                    this.diagnosticMap.set(canonicalFile, diagnostics);\r\n                //});\r\n        });\r\n    }        \r\n}","import * as childProcessModule from 'child_process';\r\nimport * as path from 'path';\r\nimport { resolve } from 'dns';\r\nimport { stdout } from 'process';\r\n\r\nfunction Invoke(psCmd: string, args: string, callback?: (error: childProcessModule.ExecException | null, stdout: string, stderr: string) => void): childProcessModule.ChildProcess {        \r\n    const cmd = `PowerShell.exe -ExecutionPolicy Bypass -file \"${psCmd}\"  ${args}`;\r\n    const options:any = {\r\n        shell : true,\r\n        windowsHide : true\r\n    }    \r\n    return childProcessModule.exec(cmd, options, callback)        \r\n}\r\n\r\nfunction getGetAlDiagnosticsPsScriptPath(){\r\n    var scriptPath = path.join(path.dirname(__filename), \"..\", \"dist\", \"powershell\", \"Get-ALDiagnostics.ps1\");\r\n    //var scriptPath = `D:\\\\Repos\\\\GitHub\\\\KonnosPB\\\\vsc-al-translation\\\\al-translation-support\\\\src\\\\powershell\\\\Get-ALDiagnostics.ps1`\r\n    return scriptPath;\r\n}\r\n\r\n//export async function getAlDiagnostics(fileToCheck: string, callback?:(execError: childProcessModule.ExecException | null, jsonResult: any)=>void):Promise<any> {    \r\nexport async function getAlDiagnostics(fileToCheck: string):Promise<any> {   \r\n\r\n    const powerShellScript = getGetAlDiagnosticsPsScriptPath();\r\n    const args = fileToCheck;\r\n    var promise = new Promise<any>((resolve, reject) =>{ \r\n        Invoke(powerShellScript, fileToCheck, (error, stdout, stderr) => {\r\n            if (error) {\r\n            console.error(`getAlDiagnostics exec error: ${error}`);          \r\n            reject(error);\r\n            return;\r\n            }\r\n            const resultString = stdout;\r\n            const jsonResult = JSON.parse(resultString);      \r\n            resolve(jsonResult);  \r\n        });\r\n    });\r\n    return promise;             \r\n     \r\n      \r\n    //   Invoke(powerShellScript, fileToCheck, (error, stdout, stderr) => {\r\n    //     let jsonResult = JSON.parse(\"{}\");\r\n    //     if (error) {\r\n    //       console.error(`getAlDiagnostics exec error: ${error}`);          \r\n    //       callback?.apply(error, jsonResult);  \r\n    //       return;\r\n    //     }\r\n    //     const resultString = stdout;\r\n    //     jsonResult = JSON.parse(resultString);      \r\n    //     //callback?(jsonResult):null;\r\n    //     callback?.apply(error, jsonResult);  \r\n                  \r\n    //   });\r\n}","module.exports = require(\"child_process\");;","module.exports = require(\"path\");;","module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport {ALExtendedCop}\tfrom './core/ALExtendedCop';\n\nlet diagnosticCollection: vscode.DiagnosticCollection;\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\n\tlet alExendedCop = new ALExtendedCop(context);\n\t//let uri = vscode.Uri.file(\"D:\\\\Repos\\\\GitHub\\\\KonnosPB\\\\vsc-al-translation\\\\al-translation-support\\\\src\\\\extension.ts\");\n\t//alExendedCop.check(uri);\n\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\t// This line of code will only be executed once when your extension is activated\n\tconsole.log('Congratulations, your extension \"al-translation-support\" is now active!');\n\n\t// The command has been defined in the package.json file\n\t// Now provide the implementation of the command with registerCommand\n\t// The commandId parameter must match the command field in package.json\n\tlet disposable = vscode.commands.registerCommand('al-translation-support.helloWorld', () => {\n\t\t// The code you place here will be executed every time your command is executed\n\n\t\t// Display a message box to the user\n\t\tvscode.window.showInformationMessage('Hello World from AL Translation Support!');\n\t});\n\n\t\n\n\tcontext.subscriptions.push(disposable);\n}\n\n\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\n"],"sourceRoot":""}